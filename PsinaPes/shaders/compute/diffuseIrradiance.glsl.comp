#version 450 core
layout(binding = 0) uniform samplerCube environmentMap;
layout(binding = 1) writeonly uniform imageCube irradianceMap;

const float pi = 3.141592;

vec3 CubeTexelToDir(uvec3 texel)
{	
	vec2 faceCoords = texel.xy / vec2(imageSize(irradianceMap));
	vec2 centerOriginFaceCoords = faceCoords * 2. - 1.;
	
	vec3 dir;
		
	if(texel.z == 0)      dir = vec3(1.0,  -centerOriginFaceCoords.y, -centerOriginFaceCoords.x);
    else if(texel.z == 1) dir = vec3(-1.0, -centerOriginFaceCoords.y, centerOriginFaceCoords.x);
    else if(texel.z == 2) dir = vec3(centerOriginFaceCoords.x, 1.0, centerOriginFaceCoords.y);
    else if(texel.z == 3) dir = vec3(centerOriginFaceCoords.x, -1.0, -centerOriginFaceCoords.y);
    else if(texel.z == 4) dir = vec3(centerOriginFaceCoords.x, -centerOriginFaceCoords.y, 1.0);
    else if(texel.z == 5) dir = vec3(-centerOriginFaceCoords.x, -centerOriginFaceCoords.y, -1.0);
	
	return normalize(dir);
}

layout(local_size_x=32, local_size_y=32, local_size_z=1) in;
void main()
{
	vec3 normal = CubeTexelToDir(gl_GlobalInvocationID);
	
	vec3 irradiance = vec3(0);
	
	vec3 up    = vec3(0.0, 0.0, 1.0);
	vec3 right = normalize(cross(up, normal));
	up         = normalize(cross(normal, right));

	float sampleDelta = 0.025;
	float nrSamples = 0.0; 
	for(float phi = 0.0; phi < 2.0 * pi; phi += sampleDelta)
	{
		for(float theta = 0.0; theta < 0.5 * pi; theta += sampleDelta)
		{
			// spherical to cartesian (in tangent space)
			vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
			// tangent space to world
			vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal; 

			irradiance += texture(environmentMap, sampleVec).rgb * cos(theta) * sin(theta);
			nrSamples++;
		}
	}
	irradiance = pi * irradiance * (1.0 / float(nrSamples));
	
	imageStore(irradianceMap, ivec3(gl_GlobalInvocationID), vec4(irradiance, 1.0));
}